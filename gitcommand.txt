
一、 Git 命令初识
在正式介绍Git命令之前，先介绍一下Git 的基本命令和操作，对Git命令有一个总体的认识
示例：从Git 版本库的初始化，通常有两种方式：
1）git clone：这是一种较为简单的初始化方式，当你已经有一个远程的Git版本库，只需要在本地克隆一份
例如：git  clone  git://github.com/someone/some_project.git   some_project 
上面的命令就是将'git://github.com/someone/some_project.git'这个URL地址的远程版本库，完全克隆到本地some_project目录下

2）git init 和 git remote：这种方式稍微复杂一些，当你本地创建了一个工作目录，你可以进入这个目录，使用'git init'命令进行初始化；Git以后就会对该目录下的文件进行版本控制，这时候如果你需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时你就可以利用'git remote add'命令来增加一个远程服务器端，
例如：git  remote  add  origin  git://github.com/someone/another_project.git
上面的命令就会增加URL地址为'git: //github.com/someone/another_project.git'，名称为origin的远程服务器，以后提交代码的时候只需要使用 origin别名即可


二、 Git 常用命令

1) 远程仓库相关命令
检出仓库：        $ git clone git://github.com/jquery/jquery.git
查看远程仓库：$ git remote -v
添加远程仓库：$ git remote add [name] [url]
删除远程仓库：$ git remote rm [name]
修改远程仓库：$ git remote set-url --push [name] [newUrl]
拉取远程仓库：$ git pull [remoteName] [localBranchName]
推送远程仓库：$ git push [remoteName] [localBranchName]

*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：
$git push origin test:master         // 提交本地test分支作为远程的master分支
$git push origin test:test              // 提交本地test分支作为远程的test分支


2）分支(branch)操作相关命令
查看本地分支：$ git branch
查看远程分支：$ git branch -r
创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支
切换分支：$ git checkout [name]
创建新分支并立即切换到新分支：$ git checkout -b [name]
删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项
合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并
创建远程分支(本地分支push到远程)：$ git push origin [name]
删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] 

*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)
$git symbolic-ref HEAD refs/heads/[name]
$rm .git/index
$git clean -fdx


3）版本(tag)操作相关命令
查看版本：$ git tag
创建版本：$ git tag [name]
删除版本：$ git tag -d [name]
查看远程版本：$ git tag -r
创建远程版本(本地版本push到远程)：$ git push origin [name]
删除远程版本：$ git push origin :refs/tags/[name]
合并远程仓库的tag到本地：$ git pull origin --tags
上传本地tag到远程仓库：$ git push origin --tags
创建带注释的tag：$ git tag -a [name] -m 'yourMessage'


4) 子模块(submodule)相关操作命令
添加子模块：$ git submodule add [url] [path]
如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs

初始化子模块：$ git submodule init  ----只在首次检出仓库时运行一次就行
更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下

删除子模块：（分4步走哦）
1) $ git rm --cached [path]
2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉
3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉
4) 手动删除子模块残留的目录


5）忽略一些文件、文件夹不提交
在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如
target
bin
*.db




git rev-parse 部分

 
Python代码  收藏代码

    $ git rev-parse --symbolic --branches   //查看分支  
      
    $ git rev-parse --symbolic --tags //查看里程碑  
      
    $ git rev-parse --symbolic --glob=refs/*    //查看所有引用  
      
    $ git rev-parse HEAD   //查看head对应的sha1哈希值  
      
    $ git rev-parse HEAD master //多个哈希值  
      
    $ git rev-parse A refs/tags/A     //同样是显示A里程碑  
      
    $ git rev-parse A^{} A^0 A^{commit}    //里程碑A的commit对象  
      
    $ git rev-parse A~3 A^^^     //记号~<n> 就相当于连续n个符号^  
      
    $ git rev-parse A^{tree} A:    //里程碑A对应的目录树  
      
    $ git rev-parse A^{tree}:src/Makefile A:src/Makefile       //表示树里面的文件  
      
    $ git rev-parse :gitg.png HEAD:gitg.png       //暂存区里的文件  
      
    $ git rev-parse :/"commit A"      //在提交日志中查找字符串显示commit 对象  
      
    $ git rev-parse HEAD@{0} master@{0}       //reflog相关语法  

 

git rev-list 部分

 
Python代码  收藏代码

    $ git rev-list --online A       //A的版本提交历史  
      
    $ git rev-list --oneline D F     //多个版本历史并集  
      
    $ git rev-list --oneline ^G D      //排除^版本的提交历史  
      
    $ git rev-list --oneline G..D      //相当于 ^G D  
      
    $ git rev-list --oneline B...C      //三点，如B..C排除BC共同部分  
      
    $ git rev-list --oneline B^@     //提交历史，自身除外  
      
    $ git rev-list --oneline B^!      //提交本身不包括其历史提交  

 

 

git log 部分

 
Python代码  收藏代码

    $ git log --oneline F^! D  
      
    $ git log --graph --oneline    //分支图显示  
      
    $ git log -3 --pretty=oneline  //最近3条  
      
    $ git log -p -1    //-p显示日志同时显示改动  
      
    $ git log --stat --oneline I..C     //显示每次提交的变更概要  
      
    $ git log --pretty=raw -1  
      
    $ git log --pretty=fuller -1  
      
    $ git log --pretty=oneline -1  
      
    $ git show D --stat     //只查看和分析某一提交  
      
    $ git cat-file -p D^0   //同上， D^0 获得里程碑D对应的提交  

 

 

git diff

 
Python代码  收藏代码

    $ git diff <commit1> <commit2> -- <paths>  
      
    $ git diff <path1> <path2>  
      
    $ git diff --word-diff       //逐字比较，我没成功  

 

git blame 文件追溯

 
Python代码  收藏代码

    $ git blame README      //逐行显示文件提交版本，提交人，提交时间  
      
    $ git blame -L 6,+5 README     //只查看某几行，使用 -L n,m